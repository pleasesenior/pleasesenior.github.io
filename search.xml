<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图书管理系统</title>
      <link href="/2022/02/03/tu-shu-guan-li-xi-tong/"/>
      <url>/2022/02/03/tu-shu-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="图书管理系统"><a href="#图书管理系统" class="headerlink" title="图书管理系统"></a>图书管理系统</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        马上年底了，对于即将毕业的学弟学妹来说，过完年应该是最忙的时候，既要为3-4月份的校园春季招聘做准备，同时又要准备毕业设计。希望本文对这些即将毕业的学弟学妹们、以及刚入门java不久并即将就业的同学们有所帮助，本文将以最简单的业务模型来讲解企业级的java开发是怎么玩的。</p><p>​    （想要源码的同学请私信我。这里打个广告，学长多年bat工作经验，常年负责校招和社招面试，有兴趣的同学可以私信我，我可以提供简历辅导和内推~~~）</p><p><img src="https://image-1303107966.cos.ap-nanjing.myqcloud.com/018%E6%97%A7%E8%A1%A3%E6%8D%90%E8%B5%A0%E7%B3%BB%E7%BB%9F.png"></p><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20210924214412900.png" alt="image-20210924214412900"></p><h3 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h3><ul><li><p>DO（DataObject）：与数据库表结构一一对应，通过DAO层向上传输数据源对象</p></li><li><p>BO（BusinessObject）：业务对象。由Service层输出的封装业务逻辑的对象</p></li><li><p>VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象</p><p>BO和VO领域模型又分为BoRequest（输入模型）、BoResponse（输出模型）、VoRequest（输入模型）、VoResponse（输出模型）</p></li></ul><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ol><li>整体架构：前后端分离项目，前端基于Vue全家桶+Element开发，后端基于SpringBoot框架开发，JDK版本1.8；</li><li>权限管理：基于Spring-Security、Spring-Session 和 Redis实现精细化到按钮级别的分布式权限管理；</li><li>接口风格：接口设计采用restful风格，接口文档基于swagger，每个接口都有详细的接口文档说明；</li><li>数据库：MySQL</li><li>日志采集：基于slf4j和Log4j2实现系统运行日志采集，基于切面实现系统操作日志采集</li><li>依赖管理：使用Maven进行项目多模块依赖管理</li><li>基于Spring Profile实现多环境配置文件管理</li></ol><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h3 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h3><pre class="line-numbers language-mssql" data-language="mssql"><code class="language-mssql">CREATE TABLE `account` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',  `passport` varchar(16) NOT NULL COMMENT '账号',  `name` varchar(6) NOT NULL COMMENT '名称',  `password` varchar(64) NOT NULL COMMENT '密码',  `status` int(11) NOT NULL DEFAULT '0' COMMENT '用户状态',  `role_id` bigint(20) NOT NULL COMMENT '角色',  `email` varchar(32) NOT NULL COMMENT '邮箱',  `phone` varchar(16) NOT NULL COMMENT '手机号',  `address` varchar(64) DEFAULT NULL COMMENT '地址',  `sex` int(11) NOT NULL DEFAULT '0' COMMENT '性别 0：女；1：男',  `description` varchar(128) DEFAULT NULL COMMENT '备注',  `last_login_time` bigint(20) DEFAULT '0' COMMENT '最近登录时间',  `create_time` bigint(20) NOT NULL DEFAULT '0' COMMENT '创建时间',  `update_time` bigint(20) DEFAULT '0' COMMENT '更新时间',  PRIMARY KEY (`id`),  UNIQUE KEY `passport_UNIQUE` (`passport`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='账号表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `role` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',  `name` varchar(32) NOT NULL COMMENT '角色名称',  `description` varchar(128) DEFAULT NULL COMMENT '备注',  `authorities` varchar(1024) NOT NULL COMMENT '权限列表',  `create_time` bigint(20) NOT NULL DEFAULT '0' COMMENT '创建时间',  `update_time` bigint(20) DEFAULT '0' COMMENT '更新时间',  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='角色表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `book` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',  `name` varchar(32) NOT NULL COMMENT '书名',  `author` varchar(32) NOT NULL COMMENT '作者',  `publish` varchar(32) NOT NULL COMMENT '出版社',  `publish_time` bigint(20) DEFAULT '0' COMMENT '出版时间',  `language` varchar(16) NOT NULL COMMENT '语言',  `price` decimal(2,0) DEFAULT '0' COMMENT '价格',  `book_class_id` bigint(20) NOT NULL COMMENT '图书分类',  `stock` int(11) NOT NULL DEFAULT '0' COMMENT '库存',  `introduction` text COMMENT '简介',  `create_time` bigint(20) NOT NULL DEFAULT '0' COMMENT '创建时间',  `update_time` bigint(20) DEFAULT '0' COMMENT '更新时间',  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='图书表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `book_class` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',  `name` varchar(32) NOT NULL COMMENT '分类名',  `description` varchar(256) DEFAULT NULL COMMENT '备注',  `create_time` bigint(20) NOT NULL DEFAULT '0' COMMENT '创建时间',  `update_time` bigint(20) DEFAULT '0' COMMENT '更新时间',  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='图书分类表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `borrow_record` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',  `book_id` bigint(20) NOT NULL COMMENT '图书',  `passport` varchar(128) NOT NULL COMMENT '账号',  `borrow_time` bigint(20) NOT NULL COMMENT '借书时间',  `expected_back_time` bigint(20) NOT NULL DEFAULT '0' COMMENT '计划还书时间',  `back_time` bigint(20) DEFAULT NULL COMMENT '还书时间',  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COMMENT='借阅信息表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `sys_log` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',  `passport` varchar(128) DEFAULT NULL COMMENT '账号',  `url` varchar(255) DEFAULT NULL COMMENT '请求URL',  `method` varchar(255) DEFAULT NULL COMMENT '请求方法',  `params` varchar(2048) DEFAULT NULL COMMENT '请求参数',  `ip` varchar(255) DEFAULT NULL COMMENT '请求ip',  `cost` bigint(20) DEFAULT NULL COMMENT '请求耗时(单位毫秒)',  `create_time` bigint(20) NOT NULL COMMENT '创建时间',  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='系统日志'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>​        整个项目接口采用的目前互联网比较流行的restful风格设计，每个接口、每个参数都有详细的文档说明。因为企业中开发必然是团队协作，必然前后端分离的开发模式，你得先把接口定义出来，然后前端可以和后端同步开发。还有一种就是对外提供接口，比如你们隔壁团队也想调用你这个服务的接口，但是你两排期是同一周，这时候你得先把接口定义出来给人家，然后大家同步开发，开发完了之后再进行联调。</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201226092208719.png" alt="image-20201226092208719"></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201226092833051.png" alt="image-20201226092833051"></p><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><strong>系统登录</strong></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image.jpg" alt="image"></p><p><strong>dashboard</strong></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225212401947.png" alt="image-20201225212401947"></p><p><strong>图书分类管理</strong></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225212812651.png" alt="image-20201225212812651"></p><p><strong>图书管理</strong></p><p>​        为了让系统更像一个真实的“图书管理系统”，学长写了个脚本，特地从网上爬了10个分类，近600本书，包括书名、作者、简介等信息</p><p>​        这里特地标了“查询、新建、详情、借阅、编辑、删除”几个按钮，因为是admin超级管理员，系统内置的超管权限是拥有所有权限的，实际上这里的每一个按钮都进行权限管理，可以进行自由组合，比如普通读者角色，只需要给读者分配“查询、详细、借阅”三个权限就够了。权限还是非常灵活的。</p><p>​        这里借阅其实也是相对复杂一点的地方，主要是两点：一个是库存小于0的时候不能借阅吧？看下面截图的第四条数据，因为库存是0，所以是不会展示借阅按钮的；另一个是库存只有5本书，但是20个人同时点了借阅，这时候你不能超过库存数吧？也就是你最多只能借出去5本书才对，这里采用的是数据库乐观锁的简单方式实现。</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225214057675.png" alt="image-20201225214057675"></p><p><strong>借阅</strong></p><p>​        借阅必须填写计划归还时间，最多是借阅一个月（参数校验做得还算很细的，这里控件只能选一个月内的时间，另外多说一句，前端页面和后端接口，几乎每个字段都做了参数校验，正常公司里也是这么做的）。同一本书一次只能借阅一本，只有归还后才能继续借阅这本书。</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225215633940.png" alt="image-20201225215633940"></p><p><strong>借阅管理</strong></p><p>​        借阅管理分为三个tab页，“所有借阅”tab页是可以查询到所有历史借阅信息的，“待还借阅”指的是还未归还的借阅记录，“逾期借阅”指的是当前时间大于预计归还时间的借阅记录。这里逾期后系统是没做额外惩罚逻辑处理的，实际上管理员在逾期用户还书的时候可以线下罚款，或者一个季度内超过三次逾期将不能继续借书，或者在逾期前一天给用户发邮件等，思路有很多，这一块个人觉得不是重点，大家有好的点子可以自由发挥~~~</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225220308429.png" alt="image-20201225220308429"></p><p><strong>还书</strong></p><p>​        读者还书时将书籍当面交给图书管理员，图书管理确认后，在借阅记录的待还借阅tab页，通过读者的账号搜索，然后点击还书操作，还书后这本书的借阅记录会从待还借阅tab页移除，同时这本书的库存会加1，到这里其实核心逻辑就走完了。（至于新增图书分类、新增书籍、下架书籍等操作，这都是管理员的活，对应的无法就是新增和编辑、删除按钮）</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225220908118.png" alt="image-20201225220908118"></p><p><strong>日志管理</strong></p><p>​        日志管理默认是开给管理员的，在系统中的所有操作都会被记录，在系统出现异常时也便于管理员进行问题排查。</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225221753779.png" alt="image-20201225221753779"></p><p><strong>用户管理</strong></p><p>​        默认也是只有管理员拥有用户管理菜单的权限，可以新建/编辑用户、分配用户角色、禁用/启用等操作</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225221912259.png" alt="image-20201225221912259"></p><p><strong>编辑用户信息</strong></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225222121418.png" alt="image-20201225222121418"></p><p><strong>角色管理</strong></p><p>​        默认也是只有管理员拥有角色管理菜单的权限，这里的权限是细粒度到按钮权限的，每个按钮都可以进行权限管理，假如给读者只分配了书籍的“查询”权限，但是这个读者也是个程序员，他想通过接口请求直接访问图书修改接口，这时候后端是会权限校验的，返回“未授权”的错误码，然后前端根据“未授权”错误码会重定向到一个403页面（这也是为什么说只有前端校验是不安全的，后端也必须得校验，这在实际企业里开发也是这样的，还没有实际开发经验的学弟学妹拿个小本本记一记，哈哈哈）</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225222231655.png" alt="image-20201225222231655"></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201225222759395.png" alt="image-20201225222759395"></p><p><strong>普通读者登录</strong></p><p>​        系统默认会创建两个角色，一个是超管角色，另一个则是普通读者角色（当然角色大家可以按前面说的自定义）。普通读者登录的菜单以及菜单中的按钮权限都会少很多，截图如下：</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201226090135056.png" alt="image-20201226090135056"></p><p><strong>我的借阅</strong></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201226090229594.png" alt="image-20201226090229594"></p><p><strong>个人信息修改</strong></p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201226090334871-20211001152217566.png" alt="image-20201226090334871"></p><p><strong>密码修改</strong></p><p>​        管理员创建完用户之后的默认密码是“123456”，用户可以登录系统自己修改密码</p><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201226090507505.png" alt="image-20201226090507505">    </p><h3 id="权限设计"><a href="#权限设计" class="headerlink" title="权限设计"></a>权限设计</h3><p>​        权限基于security和spring-session实现。权限可以分为认证和授权，认证其实就是登录，用户登录时会进行账号密码的校验，校验成功后会，会把session存入redis中。授权指的是用户是否拥有访问后端资源的权限，每个新用户在创建后都会分配角色，角色其实就是一个权限集合，这里的权限可以理解为访问后端一个个接口（资源）的权限。</p><p>​        这里权限设计的非常灵活，细粒度到按钮级别，比如图书的新增、删除、修改、查询、借阅动作，普通读者可能就只有图书的查询和借阅权限，图书管理员则拥有新增、删除、修改的权限。普通用户访问图书管理模块则只展示查询和借阅按钮，即使通过接口直接访问后端的修改或者删除接口，后端也会返回授权失败错误，因为后端每个需要权限的接口都打了权限标识，只有拥有资源权限用户才能访问。</p><p>​        比如下面的图书修改接口，只有拥有“BOOK_UPDATE”这个权限标识的用户才能访问这个接口，否则返回“未授权”的错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority(T(com.senior.book.console.api.security.Authority).BOOK_UPDATE.name())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BookUpdateVoRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志方案"><a href="#日志方案" class="headerlink" title="日志方案"></a>日志方案</h3><p>​        日志采用lombok注解+slf4j+log4j2的实现方案，基于profile实现了多环境的日志配置，因为不同环境的日志打印策略是不一样，比如开发环境我可能需要打印到console控制台，需要debug级别的日志以便于本地开发调试，测试环境可能就需要打印到日志文件里，线上环境可能需要打印到文件的同时将日志发送到kafka然后收集到es中，这样当线上部署了多台机器后我们查日志不用一台一台机器去查日志了，因为都收集到es了，我们只需要登录kibana去搜索，这样就非常方便。这里说到的kafka+es+kibana这样一套日志解决方案也是目前互联网公司比较常用的一套解决方案。如果你动手能力够强，你可以本地搭一套kafka、es、kibana，然后只需要在配置文件中加入几行配置就实现了这么一套企业级的日志解决方案（默认是输出到日志文件）。</p><p>下面是部分关键配置，如果要配置kafka，只需要在<appenders>标签中配置<kafka>配置即可</kafka></appenders></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XInclude<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_FILE<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>system.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_PATH<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>./logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PID<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>????<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_EXCEPTION_CONVERSION_WORD<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>%xwEx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_LEVEL_PATTERN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>%5p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_DATE_FORMAT_PATTERN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>yyyy-MM-dd HH:mm:ss.SSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>%clr{%d{${LOG_DATE_FORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_LOG_PATTERN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>%d{${LOG_DATE_FORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} ${sys:PID} --- [%t] %-40.40c{1.}:%L : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xi:</span>include</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log4j2/file-appender.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.senior.book<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h3><p>​        朋友们，马上2021年了，别再让你的服务光着屁屁在服务器上“罗.奔”了</p><p>​        服务监控基于 Actuator + Prometheus + Grafana 实现，代码侵入很小，只需要在pom中加入依赖。数据大盘Dashboard可以自己设置，也可以去Dashboard市场下载你想要的模板，总之，这块完全是看动手能力，大家自己玩吧~~~</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--服务监控--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/i_little_interesting/document/raw/master/2021/uPic/image-20201226110228490-20211001152227597.png" alt="image-20201226110228490"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
